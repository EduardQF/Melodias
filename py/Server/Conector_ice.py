# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `Conector.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Conector
_M_Conector = Ice.openModule('Conector')
__name__ = 'Conector'

_M_Conector._t_Actuador = IcePy.defineValue('::Conector::Actuador', Ice.Value, -1, (), False, True, None, ())

if 'ActuadorPrx' not in _M_Conector.__dict__:
    _M_Conector.ActuadorPrx = Ice.createTempClass()
    class ActuadorPrx(Ice.ObjectPrx):

        def actuart(self, melodia, context=None):
            return _M_Conector.Actuador._op_actuart.invoke(self, ((melodia, ), context))

        def actuartAsync(self, melodia, context=None):
            return _M_Conector.Actuador._op_actuart.invokeAsync(self, ((melodia, ), context))

        def begin_actuart(self, melodia, _response=None, _ex=None, _sent=None, context=None):
            return _M_Conector.Actuador._op_actuart.begin(self, ((melodia, ), _response, _ex, _sent, context))

        def end_actuart(self, _r):
            return _M_Conector.Actuador._op_actuart.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Conector.ActuadorPrx.ice_checkedCast(proxy, '::Conector::Actuador', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Conector.ActuadorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Conector::Actuador'
    _M_Conector._t_ActuadorPrx = IcePy.defineProxy('::Conector::Actuador', ActuadorPrx)

    _M_Conector.ActuadorPrx = ActuadorPrx
    del ActuadorPrx

    _M_Conector.Actuador = Ice.createTempClass()
    class Actuador(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Conector::Actuador', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Conector::Actuador'

        @staticmethod
        def ice_staticId():
            return '::Conector::Actuador'

        def actuart(self, melodia, current=None):
            raise NotImplementedError("servant method 'actuart' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Conector._t_ActuadorDisp)

        __repr__ = __str__

    _M_Conector._t_ActuadorDisp = IcePy.defineClass('::Conector::Actuador', Actuador, (), None, ())
    Actuador._ice_type = _M_Conector._t_ActuadorDisp

    Actuador._op_actuart = IcePy.Operation('actuart', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_Conector.Actuador = Actuador
    del Actuador

_M_Conector._t_ConfirmarMelodia = IcePy.defineValue('::Conector::ConfirmarMelodia', Ice.Value, -1, (), False, True, None, ())

if 'ConfirmarMelodiaPrx' not in _M_Conector.__dict__:
    _M_Conector.ConfirmarMelodiaPrx = Ice.createTempClass()
    class ConfirmarMelodiaPrx(Ice.ObjectPrx):

        def confirmarcion(self, secuencia, context=None):
            return _M_Conector.ConfirmarMelodia._op_confirmarcion.invoke(self, ((secuencia, ), context))

        def confirmarcionAsync(self, secuencia, context=None):
            return _M_Conector.ConfirmarMelodia._op_confirmarcion.invokeAsync(self, ((secuencia, ), context))

        def begin_confirmarcion(self, secuencia, _response=None, _ex=None, _sent=None, context=None):
            return _M_Conector.ConfirmarMelodia._op_confirmarcion.begin(self, ((secuencia, ), _response, _ex, _sent, context))

        def end_confirmarcion(self, _r):
            return _M_Conector.ConfirmarMelodia._op_confirmarcion.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Conector.ConfirmarMelodiaPrx.ice_checkedCast(proxy, '::Conector::ConfirmarMelodia', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Conector.ConfirmarMelodiaPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Conector::ConfirmarMelodia'
    _M_Conector._t_ConfirmarMelodiaPrx = IcePy.defineProxy('::Conector::ConfirmarMelodia', ConfirmarMelodiaPrx)

    _M_Conector.ConfirmarMelodiaPrx = ConfirmarMelodiaPrx
    del ConfirmarMelodiaPrx

    _M_Conector.ConfirmarMelodia = Ice.createTempClass()
    class ConfirmarMelodia(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Conector::ConfirmarMelodia', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Conector::ConfirmarMelodia'

        @staticmethod
        def ice_staticId():
            return '::Conector::ConfirmarMelodia'

        def confirmarcion(self, secuencia, current=None):
            raise NotImplementedError("servant method 'confirmarcion' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Conector._t_ConfirmarMelodiaDisp)

        __repr__ = __str__

    _M_Conector._t_ConfirmarMelodiaDisp = IcePy.defineClass('::Conector::ConfirmarMelodia', ConfirmarMelodia, (), None, ())
    ConfirmarMelodia._ice_type = _M_Conector._t_ConfirmarMelodiaDisp

    ConfirmarMelodia._op_confirmarcion = IcePy.Operation('confirmarcion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Conector.ConfirmarMelodia = ConfirmarMelodia
    del ConfirmarMelodia

# End of module Conector
